#!/bin/bash

TMD_URL="192.168.2.101/~ich/tm/tm_720.csv"
    # TODO  source a configuration file in ~, rename to "tmd_url"
    # TODO  maybe: implement option to discover tmd on first start
MAX_COUNT=1440 # XXX  measurements (not used for now)
# NEW_HEADER=22 # in count of graphic lines drawn
# NEW_GRAPHIC_LINE=10 # in minutes

# get colorEscapes from colors
lColor() {
	case $1 in
		"red")
			echo -en "\e[0;31m"
		;;
		"yellow")
			echo -en "\e[0;33m"
		;;
		"green")
			echo -en "\e[0;32m"
		;;
		"blue")
			echo -en "\e[0;34m"
		;;
		"magenta")
			echo -en "\e[0;35m"
		;;
		"cyan")
			echo -en "\e[0;36m"
		;;
		"white")
			echo -en "\e[0;37m"
		;;
		"ltred")
			echo -en "\e[1;31m"
		;;
		"ltyellow")
			echo -en "\e[1;33m"
		;;
		"ltgreen")
			echo -en "\e[1;32m"
		;;
		"ltblue")
			echo -en "\e[1;34m"
		;;
		"ltmagenta")
			echo -en "\e[1;35m"
		;;
		"ltcyan")
			echo -en "\e[1;36m"
		;;
		"ltwhite")
			echo -en "\e[1;37m"
		;;
		"off")
			echo -en "\e[0m"
		;;
	esac
}

format_date() {
    local y=$( echo "$1" | cut -f 1 -d"-" )
    local m=$( echo "$1" | cut -f 2 -d"-" )
    local d=$( echo "$1" | cut -f 3 -d"-" )
    echo -en "$d.$m.$y"
        # FIXME use prevoius date if $1 is not valid
}

format_time() {
    local h=$( echo "$1" | cut -f 1 -d":" )
    local m=$( echo "$1" | cut -f 2 -d":" )
    echo -en "$h:$m"
        # FIXME use previous time if $1 is not valid?
}

format_temp() {
    local temperature=$1
    if [[ -z "$temperature" ]] ; then
        temperature=1
    fi

    local d=$(( $temperature/1000 ))
    local e=$(( $temperature-d*1000 ))
    local e1=0
    if [[ "$e" -lt 0 ]] ; then
        e1=$( echo "$e" | cut -b 2 )
    else
        e1=$( echo "$e" | cut -b 1 )
    fi
    local z=$( echo -n "$e" | wc -c )
    if [[ "$z" -lt 3 ]] ; then
        echo -en "$d,0"
    else
        echo -en "$d,$e1"
    fi
}

# draw_header() {
#     echo -e "            outside  min max                 inside     "
# }

last_temp=0
last_time=0
draw_graphic_line() {
    local min=-20
    local max=45
    local t=$( echo "$1" | cut -f 1 -d"," )
    local this_time=$( echo "$2" | cut -f 2 -d":" ) # time of this dataset
    local next_time=$(( last_time+10 )) # drop temperature change within 10 minutes
    local next_time_firstbyte=$( echo "$next_time" | cut -b 1 )
    if [[ "$next_time_firstbyte" -eq "0" ]] ; then
        next_time=$( echo "$next_time" | cut -b 2 )
    fi
    local this_time_firstbyte=$( echo "$this_time" | cut -b 1 )
    if [[ "$this_time_firstbyte" -eq "0" ]] ; then
        this_time=$( echo "$this_time" | cut -b 2 )
    fi
    if [[ ! "$t" -eq "$last_temp" ]] && [[ "$this_time" -gt "$next_time" ]] ; then
        echo -en "     $2  $(lColor green)"
        for (( i=$min ; i<=$max ; i=i+1 )) ; do
            if [[ "$i" -gt 0 ]] ; then
                if [[ "$i" -le "$t" ]] ; then
                    if [[ "$i" -ge 1 ]] && [[ "$i" -le 4 ]]; then
                        echo -en "$(lColor blue)+"
                    fi
                    if [[ "$i" -ge 5 ]] && [[ "$i" -le 14 ]] ; then
                        echo -en "$(lColor green)+"
                    fi
                    if [[ "$i" -ge 15 ]] && [[ "$i" -le 24 ]] ; then
                        echo -en "$(lColor yellow)+"
                    fi
                    if [[ "$i" -ge 25 ]] && [[ "$i" -le 34 ]] ; then
                        echo -en "$(lColor red)+"
                    fi
                    if [[ "$i" -ge 35 ]] ; then
                        echo -en "$(lColor purple)+"
                    fi
                else
                    echo -en "$(lColor off) "
                fi
            elif [[ $i -lt 0 ]] ; then
                if [[ "$i" -ge "$t" ]] ; then
                    if [[ "$i" -le -16 ]] ; then
                        echo -en "$(lColor white)-"
                    fi
                    if [[ "$i" -ge -15 ]] && [[ "$i" -le -6 ]] ; then
                        echo -en "$(lColor cyan)-"
                    fi
                    if [[ "$i" -ge -5 ]] && [[ "$i" -le -1 ]] ; then
                        echo -en "$(lColor blue)-"
                    fi
                else
                    echo -en " "
                fi
            else
                # echo -en " "
                echo -en "$(lColor off):"
            fi
        done
        echo -e "$(lColor off)"
        last_temp=$t
        last_time=$this_time
    fi
}

# draw_header
    # XXX   no header please

# draw last temperature changes
POS_DATE=1
POS_TIME=2
POS_INSIDE=3
POS_OUTSIDE=4
pos=0
current_temps=$( curl -s "$TMD_URL" -m 5 | tr "," " " | tail -n 720 )
for current_temp in $current_temps ; do
    pos=$pos+1

    if [[ "$pos" -eq "$POS_DATE" ]] ; then
        # currently no display of date in graph
        :
    elif [[ "$pos" -eq "$POS_TIME" ]] ; then
        current_time=$current_temp
        current_formatted_time=$( format_time "$current_time" )
    elif [[ "$pos" -eq "$POS_INSIDE" ]] ; then
        # currently only display of outside temparature in graph
        :
    elif [[ "$pos" -eq "$POS_OUTSIDE" ]] ; then
        formatted_aussen=$( format_temp "$current_temp" )
        draw_graphic_line "$formatted_aussen" "$current_formatted_time"
        pos=0
    fi

    # debug
    # echo "$current_temp"
done

# line=0
# measurement=$NEW_GRAPHIC_LINE
last_date="0000-00-00"
while true ; do
    current_temps=$( curl -s "$TMD_URL" -m 5 | tr "," " " )
    lines=$( echo "$current_temps" | wc -l )
    lines=$(( lines-1 ))
    current_temps=$( echo "$current_temps" | tail -n "$lines" )
    if [[ ! -z "$current_temps" ]] ; then
        # debug
        # echo "ct = $current_temps"

        sorted_temps_aussen=$( echo "$current_temps" | sort -k 4 -V )

        # debug
        # echo "sta = $sorted_temps_aussen"

        max_aussen_time=$( echo "$sorted_temps_aussen" | tail -n 1 | cut -f 2 -d" " )
        max_formatted_aussen_time=$( format_time "$max_aussen_time" )
        min_aussen_time=$( echo "$sorted_temps_aussen" | head -n 1 | cut -f 2 -d" " )
        min_formatted_aussen_time=$( format_time "$min_aussen_time" )
        max_aussen=$( echo "$sorted_temps_aussen" | tail -n 1 | cut -f 4 -d" " )
        min_aussen=$( echo "$sorted_temps_aussen" | head -n 1 | cut -f 4 -d" " )

        # debug
        # echo "max_außen = $max_aussen, min_außen = $min_aussen"

        current_temp=$( echo "$current_temps" | tail -n 1 )
        current_date=$( echo "$current_temp" | cut -f 1 -d" " )
        current_formatted_date=$( format_date "$current_date" )
        if [[ "$last_date" == "$current_formatted_date" ]] ; then
            :
        else
            if [[ "$last_date" != "0000-00-00" ]] ; then
                echo -e ""
            fi
            last_date=$current_formatted_date
        fi
        innen=$( echo "$current_temp" | cut -f 3 -d" " )
        aussen=$( echo "$current_temp" | cut -f 4 -d" " )

        # debug
        # echo "innen = $innen, außen = $aussen"

        # if [[ "$line" -ge "$NEW_HEADER" ]] ; then
        #     draw_header
        #     line=0
        # fi
        # if [[ "$measurement" -ge "$NEW_GRAPHIC_LINE" ]] ; then
        formatted_aussen=$( format_temp "$aussen" )
        current_time=$( echo "$current_temp" | cut -f 2 -d" " )
        current_formatted_time=$( format_time "$current_time" )
        draw_graphic_line "$formatted_aussen" "$current_formatted_time"
            # line=$(( line+1 ))
            # measurement=0
        # fi
        # measurement=$(( measurement+1 ))

        # debug
        # echo "measurement = $measurement"

        echo -en "$current_formatted_date  "
        echo -en "$(lColor ltgreen)$( format_temp "$aussen" )$(lColor off)      "
        echo -en "[$(lColor blue)$( format_temp "$min_aussen" )$(lColor off)@$min_formatted_aussen_time "
        echo -en "$(lColor red)$( format_temp "$max_aussen" )$(lColor off)@$max_formatted_aussen_time]  "
        echo -en "$(lColor ltyellow)$( format_temp "$innen" )$(lColor off) °C    "
            # FIXME check all parameter of format_temp() is valid, if not, use previous value
    else
        # no connection
        echo -en "no connection to $TMD_URL       "
    fi

    sleep 60
    echo -en "\r"

done
